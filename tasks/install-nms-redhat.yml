---
- name: (CentOS/Oracle Linux/RHEL) {{ (nms_cleanup_status is defined) | ternary('Remove', 'Configure') }} NGINX Management Suite Yum repository
  block:
    # # Temporary fix to address issue where install fails on RHEL7 and Oracle Linux 7
    # - name: (RHEL7 / Oracle Linux 7 Workaround) Add the NGINX Management Suite Yum repository
    #   ansible.builtin.yum_repository:
    #     name: nms
    #     description: NGINX Management Suite
    #     baseurl: https://pkgs.nginx.com/nms/centos/7/$basearch/
    #     enabled: yes
    #     sslclientcert: "{{ nms_ssl_cert_fullpath }}"
    #     sslclientkey: "{{ nms_ssl_key_fullpath }}"
    #     state: "{{ nms_cleanup_status | default('present') }}"
    #   when: ansible_facts.distribution_major_version == '7'
    #     and (ansible_facts.distribution == 'RedHat' or ansible_facts.distribution == 'OracleLinux')
    - name: (CentOS/Oracle Linux/RHEL8) {{ (nms_cleanup_status is defined) | ternary('Remove', 'Configure') }} NGINX Management Suite Yum repository
      ansible.builtin.yum_repository:
        name: nms
        description: NGINX Management Suite
        baseurl: "{{ nms_centos_yum_repo }}"
        enabled: yes
        sslclientcert: "{{ nms_ssl_cert_fullpath }}"
        sslclientkey: "{{ nms_ssl_key_fullpath }}"
        state: "{{ nms_cleanup_status | default('present') }}"
      # when: ansible_facts.distribution_major_version == '8' and ansible_facts.distribution == 'RedHat'
      #   or ansible_facts.distribution == 'CentOS'
      #   or ansible_facts.distribution == 'OracleLinux' and ansible_facts.distribution_major_version == '8'
  when: ansible_facts['distribution'] != "Amazon"

- name: (Amazon) {{ (nms_cleanup_status is defined) | ternary('Remove', 'Configure') }} NGINX Management Suite Yum repository
  ansible.builtin.yum_repository:
    name: nms
    description: NGINX Management Suite
    baseurl: "{{ nms_amazon_yum_repo }}"
    enabled: yes
    sslclientcert: "{{ nms_ssl_cert_fullpath }}"
    sslclientkey: "{{ nms_ssl_key_fullpath }}"
    state: "{{ nms_cleanup_status | default('present') }}"
  when: ansible_facts['distribution'] == "Amazon"

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nms_setup | capitalize }} NGINX Instance Manager
  ansible.builtin.yum:
    name: "nms-instance-manager{{ (nms_version != '') | ternary('-' + nms_version , '') }}"
    update_cache: yes
    allow_downgrade: "{{ omit if ansible_version.full is version('2.12', '<') else true }}"
    state: "{{ nms_state }}"
  register: nms_install_state
  when: nms_cleanup_status is not defined

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Make sure NGINX Management Suite is running
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    enabled: true
  notify: Restart NGINX
  with_items: "{{ nms_services }}"
  when: nms_cleanup_status is not defined

# - name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Permit traffic in default zone for https and http service
#   ansible.posix.firewalld:
#     service: "{{ item }}"
#     permanent: yes
#     state: enabled
#   when: nms_cleanup_status is not defined
#   loop:
#     - https
#     - http
