---
- name: (Amazon/CentOS/Oracle Linux/RHEL) {{ 'Remove' if nms_cleanup_status is defined or nms_state == 'absent' else 'Configure' }} NGINX Management Suite Yum repository
  ansible.builtin.yum_repository:
    name: nms
    description: NGINX Management Suite
    baseurl: "{{ nms_repository_redhat | default(lookup('vars', 'nms_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'centos')))) }}"
    enabled: true
    gpgcheck: "{{ omit if nms_gpgcheck is not defined else nms_gpgcheck }}"
    sslclientcert: "/etc/ssl/nginx/nginx-repo.crt"
    sslclientkey: "/etc/ssl/nginx/nginx-repo.key"
    state: "{{ nms_cleanup_status | default('present') }}"

- name: (Amazon/CentOS/Oracle Linux/RHEL) {{ 'Remove' if nms_cleanup_status is defined or nms_state == 'absent' else 'Configure' }} NMS Module Yum repository
  ansible.builtin.yum_repository:
    name: "nms-{{ item.name }}"
    description: "NGINX Management Suite - {{ item.name }}"
    baseurl: "{{ item.yum_repo | default(adm_os_repos[ansible_distribution]) if item.name == 'adm' else item.yum_repo }}"
    enabled: true
    gpgcheck: "{{ omit if item.yum_gpgcheck is not defined else item.yum_gpgcheck }}"
    sslclientcert: "/etc/ssl/nginx/nginx-repo.crt"
    sslclientkey: "/etc/ssl/nginx/nginx-repo.key"
    state: "{{ nms_cleanup_status | default(nms_state if item.setup is not defined else nms_state_vals[item.setup]) }}"
  loop: "{{ nms_modules }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - nms_modules is defined
    - item.name == "adm" or item.yum_repo is defined

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nms_setup | capitalize }} NGINX Instance Manager
  ansible.builtin.yum:
    name: "nms-instance-manager{{ (nms_version is not defined or nms_version == '') | ternary('', '-' + nms_version) }}"
    update_cache: true
    allow_downgrade: "{{ omit if ansible_version.full is version('2.12', '<') else true }}"
    state: "{{ nms_state }}"
    update_only: "{{ nms_setup | lower == 'upgrade' }}"
  register: nms_install_state
  when: nms_cleanup_status is not defined
  notify:
    - Restart NGINX Management Suite
    - Restart NGINX

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nms_setup if item.setup is not defined else item.setup | capitalize }} NMS Modules
  ansible.builtin.yum:
    name: "{{ nms_module_vals[item.name]['package_name'] }}{{ '' if (item.version is not defined or item.version == '') else '-' + item.version }}"
    update_cache: true
    allow_downgrade: "{{ omit if ansible_version.full is version('2.12', '<') else true }}"
    state: "{{ nms_state if item.setup is not defined else nms_state_vals[item.setup] }}"
    update_only: "{{ nms_setup | lower == 'upgrade' if item.setup is not defined else nms_state_vals[item.setup] | lower == 'upgrade' }}"
  when:
    - nms_cleanup_status is not defined
    - nms_modules is defined
  loop: "{{ nms_modules }}"
  loop_control:
    label: "{{ item.name }}"
  notify:
    - Restart NGINX Management Suite
    - Restart NGINX

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Make sure NGINX Management Suite is {{ nms_service_state | capitalize }}
  ansible.builtin.systemd:
    state: "{{ nms_service_state }}"
    name: "{{ item }}"
    enabled: true
  notify: Restart NGINX
  loop: "{{ nms_services | flatten(levels=1) }}"
  when:
    - nms_cleanup_status is not defined
    - nms_setup | lower != 'uninstall'

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Get list of installed packages
  ansible.builtin.yum:
    list: installed
  register: firewalld_status

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Permit traffic in default zone for https and http service if 'firewalld' is installed
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  when:
    - nms_cleanup_status is not defined
    - '"firewalld" in (firewalld_status.results | map(attribute="name") | list)'
    - nms_setup | lower != 'uninstall'
  loop:
    - https
    - http
