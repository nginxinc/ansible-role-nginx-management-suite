---
- name: (CentOS/Oracle Linux/RHEL) {{ (nms_cleanup_status is defined) | ternary('Remove', 'Configure') }} NGINX Management Suite Yum repository
  ansible.builtin.yum_repository:
    name: nms
    description: NGINX Management Suite
    baseurl: "{{ nms_centos_yum_repo }}"
    enabled: true
    gpgcheck: "{{ omit if nms_gpgcheck is not defined else nms_gpgcheck }}"
    sslclientcert: "/etc/ssl/nginx/nginx-repo.crt"
    sslclientkey: "/etc/ssl/nginx/nginx-repo.key"
    state: "{{ nms_cleanup_status | default('present') }}"
  when: ansible_facts['distribution'] != "Amazon"

- name: (Amazon) {{ (nms_cleanup_status is defined) | ternary('Remove', 'Configure') }} NGINX Management Suite Yum repository
  ansible.builtin.yum_repository:
    name: nms
    description: NGINX Management Suite
    baseurl: "{{ nms_amazon_yum_repo }}"
    enabled: true
    sslclientcert: "/etc/ssl/nginx/nginx-repo.crt"
    sslclientkey: "/etc/ssl/nginx/nginx-repo.key"
    state: "{{ nms_cleanup_status | default('present') }}"
  when: ansible_facts['distribution'] == "Amazon"

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nms_setup | capitalize }} NGINX Instance Manager
  ansible.builtin.yum:
    name: "nms-instance-manager{{ (nms_version is not defined or nms_version == '') | ternary('', '-' + nms_version) }}"
    update_cache: true
    allow_downgrade: "{{ omit if ansible_version.full is version('2.12', '<') else true }}"
    state: "{{ nms_state }}"
    update_only: "{{ nms_setup | lower == 'upgrade' }}"
  register: nms_install_state
  when: nms_cleanup_status is not defined

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Make sure NGINX Management Suite is running
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    enabled: true
  notify: Restart NGINX
  loop: "{{ nms_services | flatten(levels=1) }}"
  when: nms_cleanup_status is not defined

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Get list of installed packages
  ansible.builtin.yum:
    list: installed
  register: firewalld_status

- name: (Amazon Linux/CentOS/Oracle Linux/RHEL) Permit traffic in default zone for https and http service if 'firewalld' is installed
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  when: nms_cleanup_status is not defined and 'firewalld' in (firewalld_status.results | map(attribute='name') | list)
  loop:
    - https
    - http
